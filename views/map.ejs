<!DOCTYPE html>
<html lang="en">

<head>
  <title>Live Location - SAFEHer</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    :root {
      --primary: #ff4081;
      --primary-dark: #c60055;
      --secondary: #5c6bc0;
      --light: #f8f9fa;
      --dark: #343a40;
      --success: #28a745;
      --text: #333;
      --shadow: 0 5px 15px rgba(0, 0, 0, 0.1);

      /* Map-specific colors for differentiation */
      --map-primary: #4285F4;
      --map-secondary: #34A853;
      --map-accent: #EA4335;
      --map-neutral: #FBBC05;
      --map-dark: #1A73E8;

      --animation-duration: 0.8s;
      --animation-timing: cubic-bezier(0.175, 0.885, 0.32, 1.275);
      --transition-timing: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: #f5f7fa;
      color: var(--text);
      padding-top: 80px;
    }

    /* Header Styles */
    .safety-header {
      background-color: white;
      box-shadow: 0 2px 15px rgba(0, 0, 0, 0.1);
      position: fixed;
      width: 100%;
      top: 0;
      left: 0;
      z-index: 1000;
      transition: all 0.3s ease;
      border-bottom: 3px solid var(--map-primary);
    }

    .header-container {
      display: flex;
      justify-content: space-between;
      align-items: center;
      max-width: 1200px;
      margin: 0 auto;
      padding: 15px 20px;
    }

    .logo {
      font-weight: 700;
      font-size: 1.5rem;
    }

    .logo a {
      text-decoration: none;
      color: var(--primary);
      display: flex;
      align-items: center;
    }

    .logo i {
      color: var(--primary);
      margin-right: 10px;
      font-size: 26px;
      transition: transform 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    }

    .logo:hover i {
      transform: rotate(20deg) scale(1.1);
    }

    .header-buttons {
      display: flex;
      gap: 12px;
    }

    .header-buttons .btn {
      border-radius: 30px;
      font-weight: 500;
      padding: 8px 16px;
      transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    }

    .btn-outline-primary {
      color: var(--primary);
      border: 2px solid var(--primary);
    }

    .btn-outline-primary:hover {
      color: white;
      background-color: var(--primary);
      transform: translateY(-3px);
      box-shadow: var(--shadow);
    }

    .btn-primary {
      background-color: var(--primary);
      border-color: var(--primary);
    }

    .btn-primary:hover {
      background-color: var(--primary-dark);
      border-color: var(--primary-dark);
      transform: translateY(-3px);
      box-shadow: var(--shadow);
    }

    /* Main Content */
    .main-container {
      max-width: 1000px;
      margin: 20px auto 40px;
      background: white;
      border-radius: 15px;
      box-shadow: 0 5px 25px rgba(0, 0, 0, 0.08);
      padding: 30px;
    }

    /* Animations */
    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(30px);
      }

      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    @keyframes slideInLeft {
      from {
        opacity: 0;
        transform: translateX(-30px);
      }

      to {
        opacity: 1;
        transform: translateX(0);
      }
    }

    @keyframes slideInRight {
      from {
        opacity: 0;
        transform: translateX(30px);
      }

      to {
        opacity: 1;
        transform: translateX(0);
      }
    }

    @keyframes scaleIn {
      from {
        opacity: 0;
        transform: scale(0.9);
      }

      to {
        opacity: 1;
        transform: scale(1);
      }
    }

    .animate {
      opacity: 0;
    }

    .fadeInUp {
      animation: fadeInUp var(--animation-duration) var(--animation-timing) forwards;
    }

    .slideInLeft {
      animation: slideInLeft var(--animation-duration) var(--animation-timing) forwards;
    }

    .slideInRight {
      animation: slideInRight var(--animation-duration) var(--animation-timing) forwards;
    }

    .scaleIn {
      animation: scaleIn var(--animation-duration) var(--animation-timing) forwards;
    }

    /* Voice Detection Toggle */
    .voice-toggle-container {
      background: linear-gradient(135deg, rgba(255, 64, 129, 0.05) 0%, rgba(92, 107, 192, 0.05) 100%);
      border-radius: 15px;
      padding: 20px;
      margin-bottom: 30px;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
      border-left: 4px solid var(--primary);
      transition: var(--transition-timing);
    }

    .voice-toggle-container:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    }

    .toggle-label {
      font-weight: 600;
      color: var(--map-dark);
      margin-right: 15px;
      font-size: 1rem;
    }

    .switch {
      position: relative;
      display: inline-block;
      width: 50px;
      height: 24px;
    }

    .switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }

    .slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #ccc;
      transition: 0.4s;
      border-radius: 24px;
    }

    .slider:before {
      position: absolute;
      content: "";
      height: 18px;
      width: 18px;
      left: 3px;
      bottom: 3px;
      background-color: white;
      transition: 0.4s;
      border-radius: 50%;
    }

    input:checked+.slider {
      background-color: var(--map-secondary);
    }

    input:checked+.slider:before {
      transform: translateX(26px);
    }

    /* Emergency Button - Centered and styled */
    .emergency-btn-container {
      text-align: center;
      margin: 25px 0;
    }

    .panic-btn {
      background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
      color: white;
      border: none;
      padding: 15px 30px;
      font-size: 1.1rem;
      font-weight: 600;
      border-radius: 30px;
      cursor: pointer;
      transition: var(--transition-timing);
      box-shadow: 0 8px 20px rgba(255, 64, 129, 0.3);
      display: inline-flex;
      align-items: center;
      position: relative;
      overflow: hidden;
    }

    .panic-btn::before {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 0;
      height: 0;
      background: rgba(255, 255, 255, 0.2);
      border-radius: 50%;
      transform: translate(-50%, -50%);
      transition: width 0.6s, height 0.6s;
    }

    .panic-btn:hover::before {
      width: 300px;
      height: 300px;
    }

    .panic-btn:hover {
      transform: translateY(-7px) scale(1.03);
      box-shadow: 0 15px 30px rgba(255, 64, 129, 0.4);
    }

    .panic-btn i {
      margin-right: 10px;
      font-size: 1.2rem;
    }

    /* Safety Rating */
    .safety-rating {
      text-align: center;
      padding: 25px;
      margin: 30px 0;
      border-radius: 15px;
      font-weight: 600;
      font-size: 1.3rem;
      background: linear-gradient(135deg, rgba(255, 64, 129, 0.05) 0%, rgba(92, 107, 192, 0.05) 100%);
      border-left: 4px solid var(--primary);
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
      transition: var(--transition-timing);
      color: var(--text);
    }

    .safety-rating:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.12);
    }

    /* Map Container */
    .map-container {
      margin: 30px 0;
      border-radius: 15px;
      overflow: hidden;
      box-shadow: 0 5px 20px rgba(0, 0, 0, 0.12);
      border: 1px solid rgba(0, 0, 0, 0.05);
      transition: all 0.3s ease;
    }

    .map-container:hover {
      transform: translateY(-3px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }

    #map {
      width: 100%;
      height: 450px;
    }

    /* Route planner enhanced styling */
    .route-planner-container {
      background: linear-gradient(135deg, rgba(255, 255, 255, 1) 0%, rgba(248, 249, 250, 0.9) 100%);
      border-radius: 20px;
      padding: 35px;
      margin: 40px 0;
      box-shadow: 0 15px 35px rgba(0, 0, 0, 0.08);
      border: none;
      position: relative;
      overflow: hidden;
      transition: var(--transition-timing);
    }

    .route-planner-container::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 5px;
      background: linear-gradient(90deg, var(--primary) 0%, var(--secondary) 100%);
    }

    .route-planner-container h3 {
      color: var(--primary);
      margin-bottom: 30px;
      font-weight: 700;
      display: flex;
      align-items: center;
      position: relative;
      padding-bottom: 15px;
    }

    .route-planner-container h3::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 80px;
      height: 3px;
      background: var(--primary);
      border-radius: 3px;
    }

    .route-planner-container h3 i {
      background-color: rgba(255, 64, 129, 0.1);
      color: var(--primary);
      width: 40px;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
      margin-right: 15px;
      box-shadow: 0 5px 15px rgba(255, 64, 129, 0.15);
    }

    .route-search {
      display: flex;
      gap: 15px;
      margin: 20px 0;
      width: 100%;
    }

    #destinationInput {
      flex: 1;
      border: 2px solid rgba(92, 107, 192, 0.2);
      border-radius: 15px;
      padding: 18px 25px;
      font-size: 1.1rem;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
      transition: var(--transition-timing);
      width: 100%;
      min-width: 250px;
    }

    #destinationInput:focus {
      border-color: var(--primary);
      box-shadow: 0 5px 20px rgba(255, 64, 129, 0.15);
      transform: translateY(-2px);
    }

    .route-btn {
      background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
      border-radius: 15px;
      height: 60px;
      padding: 0 35px;
      font-weight: 600;
      letter-spacing: 0.5px;
      box-shadow: 0 8px 15px rgba(255, 64, 129, 0.2);
      transition: var(--transition-timing);
      display: flex;
      align-items: center;
      justify-content: center;
      white-space: nowrap;
    }

    .route-btn:hover {
      transform: translateY(-7px);
      box-shadow: 0 15px 30px rgba(255, 64, 129, 0.3);
    }

    .route-btn i {
      margin-right: 10px;
    }

    @media (max-width: 768px) {
      .route-search {
        flex-direction: column;
      }

      .route-btn {
        width: 100%;
        margin-top: 10px;
      }
    }

    /* Route analysis styling */
    .route-analysis {
      margin-top: 40px;
      padding-top: 30px;
      border-top: 2px dashed rgba(92, 107, 192, 0.2);
    }

    .route-analysis h4 {
      font-size: 1.5rem;
      font-weight: 600;
      color: var(--primary);
      margin-bottom: 25px;
      text-align: center;
      opacity: 0;
      transform: translateY(20px);
      animation: fadeInUp 0.8s var(--animation-timing) forwards;
    }

    .route-safety-metrics {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 15px;
      margin: 20px 0;
    }

    @media (max-width: 992px) {
      .route-safety-metrics {
        grid-template-columns: repeat(2, 1fr);
      }
    }

    .safety-metric {
      background: linear-gradient(135deg, rgba(255, 255, 255, 1) 0%, rgba(248, 249, 250, 0.8) 100%);
      padding: 15px;
      border-radius: 12px;
      text-align: center;
      box-shadow: 0 6px 15px rgba(0, 0, 0, 0.07);
      transition: var(--transition-timing);
      border: 1px solid rgba(255, 64, 129, 0.1);
      position: relative;
      overflow: hidden;
      opacity: 1;
      transform: none;
    }

    .safety-metric::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 0;
      background: linear-gradient(to bottom, rgba(255, 64, 129, 0.05), transparent);
      transition: height 0.5s ease;
      z-index: -1;
    }

    .safety-metric:hover {
      transform: translateY(-5px);
      box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
      border-color: var(--primary);
    }

    .safety-metric:hover::before {
      height: 100%;
    }

    .safety-metric-1 {
      animation: fadeInUp 0.8s var(--animation-timing) 0.1s forwards;
    }

    .safety-metric-2 {
      animation: fadeInUp 0.8s var(--animation-timing) 0.2s forwards;
    }

    .safety-metric-3 {
      animation: fadeInUp 0.8s var(--animation-timing) 0.3s forwards;
    }

    .safety-metric-4 {
      animation: fadeInUp 0.8s var(--animation-timing) 0.4s forwards;
    }

    /* Route options styling */
    .route-option {
      background: linear-gradient(135deg, rgba(255, 255, 255, 1) 0%, rgba(248, 249, 250, 0.8) 100%);
      border: 2px solid transparent;
      border-radius: 15px;
      padding: 25px;
      margin: 20px 0;
      cursor: pointer;
      transition: var(--transition-timing);
      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.05);
      opacity: 0;
      transform: translateY(30px);
      position: relative;
      overflow: hidden;
    }

    .route-option::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 3px;
      background: linear-gradient(90deg, var(--primary) 0%, var(--secondary) 100%);
      transform: scaleX(0);
      transform-origin: left;
      transition: transform 0.8s ease;
    }

    .route-option:nth-child(1) {
      animation: slideInLeft 0.8s var(--animation-timing) 0.5s forwards;
    }

    .route-option:nth-child(2) {
      animation: fadeInUp 0.8s var(--animation-timing) 0.6s forwards;
    }

    .route-option:nth-child(3) {
      animation: slideInRight 0.8s var(--animation-timing) 0.7s forwards;
    }

    .route-option:hover {
      transform: translateY(-10px);
      border-color: var(--primary);
      box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
    }

    .route-option:hover::after {
      transform: scaleX(1);
    }

    .route-option.selected {
      border-color: var(--primary);
      background: rgba(255, 64, 129, 0.03);
      transform: translateY(-10px);
      box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
    }

    .route-option.selected::after {
      transform: scaleX(1);
    }

    /* Route recommendations styling */
    .safety-tips {
      margin-top: 30px;
      padding: 25px;
      border-radius: 15px;
      background: linear-gradient(135deg, rgba(255, 64, 129, 0.03) 0%, rgba(92, 107, 192, 0.03) 100%);
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
      border-left: 4px solid var(--primary);
      opacity: 0;
      transform: translateY(30px);
      animation: fadeInUp 0.8s var(--animation-timing) 0.8s forwards;
    }

    .safety-tips h5 {
      display: flex;
      align-items: center;
      color: var(--primary);
      font-weight: 600;
      margin-bottom: 15px;
    }

    .safety-tips h5 i {
      margin-right: 10px;
      color: var(--primary);
    }

    .safety-tips ul {
      padding-left: 20px;
    }

    .safety-tips li {
      margin-bottom: 10px;
      position: relative;
      padding-left: 15px;
    }

    .safety-tips li:before {
      content: "•";
      color: var(--primary);
      font-weight: bold;
      position: absolute;
      left: 0;
    }

    /* Loading indicator */
    .loading-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 30px 0;
    }

    .loading-spinner {
      width: 50px;
      height: 50px;
      border: 5px solid rgba(255, 64, 129, 0.1);
      border-top: 5px solid var(--primary);
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin-bottom: 15px;
    }

    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }

      100% {
        transform: rotate(360deg);
      }
    }

    /* Mobile-first adjustments */
    @media (max-width: 768px) {
      .main-container {
        padding: 20px 15px;
      }

      .safety-header {
        padding: 10px 0;
      }

      .header-container {
        padding: 10px 15px;
      }

      .logo {
        font-size: 1.3rem;
      }

      .header-buttons .btn {
        padding: 6px 12px;
        font-size: 0.9rem;
      }

      .emergency-btn-container {
        position: sticky;
        bottom: 20px;
        z-index: 900;
        margin: 15px 0;
      }

      .panic-btn {
        padding: 12px 24px;
        box-shadow: 0 5px 20px rgba(255, 64, 129, 0.4);
      }

      .route-planner-container {
        padding: 25px 20px;
      }

      .route-search {
        gap: 10px;
      }

      #destinationInput {
        padding: 14px 20px;
      }

      .route-btn {
        height: 50px;
        font-size: 0.95rem;
      }

      /* Improve mobile route options */
      .route-option {
        padding: 20px 15px;
      }

      .route-header {
        flex-direction: column;
        align-items: flex-start;
      }

      .route-details {
        flex-direction: column;
        align-items: flex-start;
        gap: 8px;
      }

      /* Touch targets for mobile */
      .safety-metric:active {
        transform: translateY(-5px);
      }
    }

    /* Add floating back-to-top button for mobile */
    .back-to-top {
      position: fixed;
      bottom: 20px;
      right: 20px;
      width: 45px;
      height: 45px;
      background: var(--primary);
      color: white;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
      cursor: pointer;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;
      z-index: 999;
    }

    .back-to-top.visible {
      opacity: 1;
      visibility: visible;
    }

    /* Reorganize order of elements for route analysis section */
    .route-analysis-container {
      display: flex;
      flex-direction: column;
      width: 100%;
    }

    .route-options-container {
      order: 1;
      width: 100%;
    }

    .safety-tips-container {
      order: 2;
      width: 100%;
      margin-top: 20px;
    }

    /* Safety Indicator Styles */
    #safety-indicator {
      position: fixed;
      top: 10px;
      right: 10px;
      padding: 10px 15px;
      border-radius: 5px;
      color: white;
      font-weight: bold;
      z-index: 1000;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
    }

    #safety-indicator.safe {
      background-color: #2ecc71;
    }

    #safety-indicator.caution {
      background-color: #f39c12;
    }

    #safety-indicator.unsafe {
      background-color: #e74c3c;
    }

    #safety-indicator.loading {
      background-color: #3498db;
    }

    #safety-indicator.error {
      background-color: #95a5a6;
    }

    .safety-rating {
      font-size: 18px;
    }

    .safety-judgement {
      font-size: 14px;
    }

    .pulse {
      display: inline-block;
      width: 10px;
      height: 10px;
      border-radius: 50%;
      background: white;
      animation: pulse 1.5s infinite;
      margin-right: 5px;
    }

    @keyframes pulse {
      0% {
        transform: scale(0.95);
        box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.7);
      }

      70% {
        transform: scale(1);
        box-shadow: 0 0 0 10px rgba(255, 255, 255, 0);
      }

      100% {
        transform: scale(0.95);
        box-shadow: 0 0 0 0 rgba(255, 255, 255, 0);
      }
    }

    .safety-notification {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background-color: #e74c3c;
      color: white;
      padding: 15px;
      border-radius: 5px;
      box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
      z-index: 1100;
      max-width: 300px;
      animation: slide-in 0.5s;
    }

    .notification-title {
      font-weight: bold;
      margin-bottom: 5px;
    }

    .fade-out {
      opacity: 0;
      transition: opacity 1s ease;
    }

    @keyframes slide-in {
      from {
        transform: translateX(100%);
        opacity: 0;
      }

      to {
        transform: translateX(0);
        opacity: 1;
      }
    }
  </style>
</head>

<body>
  <!-- Header -->
  <header class="safety-header">
    <div class="header-container">
      <div class="logo">
        <a href="/map">
          <i class="fas fa-shield-alt"></i> SAFEHer
        </a>
      </div>
      <div class="header-buttons">
        <a href="/profile" class="btn btn-outline-primary">
          <i class="fas fa-user"></i> My Profile
        </a>
        <a href="/logout" class="btn btn-primary">
          <i class="fas fa-sign-out-alt"></i> Logout
        </a>
      </div>
    </div>
  </header>

  <!-- Main Content -->
  <div class="container main-container">
    <!-- Voice Detection Toggle -->
    <div class="voice-toggle-container animate fadeInUp">
      <span class="toggle-label"><i class="fas fa-microphone"></i> Voice Detection Alert</span>
      <label class="switch">
        <input type="checkbox" id="voiceToggle" onchange="toggleVoiceControl()">
        <span class="slider"></span>
      </label>
    </div>

    <!-- Emergency Button - Centered below toggle -->
    <div class="emergency-btn-container animate fadeInUp" style="animation-delay: 0.2s">
      <button onclick="sendPanic(this)" class="panic-btn">
        <i class="fas fa-exclamation-triangle"></i> Emergency Alert
      </button>
    </div>

    <!-- Safety Rating -->
    <div id="area-rating" class="safety-rating animate fadeInUp" style="animation-delay: 0.3s">Evaluating area safety...
    </div>

    <!-- Map -->
    <div class="map-container animate scaleIn" style="animation-delay: 0.4s">
      <div id="map"></div>
    </div>

    <div class="route-planner-container animate fadeInUp" style="animation-delay: 0.5s">
      <h3><i class="fas fa-route"></i> Find Safest Route</h3>
      <div class="route-search">
        <input type="text" id="destinationInput" placeholder="Enter your destination" autocomplete="off">
        <button onclick="planSafeRoute()" class="route-btn">
          <i class="fas fa-search"></i> Find Safe Routes
        </button>
      </div>
      <div id="routeAnalysis" class="route-analysis" style="display: none;">
        <h4>Route Safety Analysis</h4>
        <div id="safetyMetrics"></div>
        <div class="route-analysis-container">
          <div id="alternativeRoutes" class="route-options-container"></div>
          <div id="safetyTips" class="safety-tips-container"></div>
        </div>
      </div>
    </div>
  </div>

  <!-- Safety Indicator -->
  <div id="safety-indicator" class="loading">
    <span class="pulse"></span> Evaluating area safety...
  </div>

  <!-- JavaScript Section -->
  <script>
    // Global variables
    let map, marker, lastPanic = 0;
    const triggerWord = "help";
    let recognition = null;
    let directionsRenderer;
    let routesData = [];
    let selectedRouteIndex = 0;
    let currentPosition = null;
    let locationUpdateTimer = null;
    let safetyEvaluationTimer = null;
    let safetyAnalysisData = null;

    // Initialize map and location services
    async function initMap() {
      // Create map with default center (India)
      map = new google.maps.Map(document.getElementById('map'), {
        center: { lat: 20.5937, lng: 78.9629 },
        zoom: 15,
        mapTypeControl: true,
        fullscreenControl: true,
        streetViewControl: true,
        mapTypeControlOptions: {
          style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
        }
      });

      console.log("Map initialized");
      initializeAutocomplete();

      // Load current location and start tracking
      try {
        console.log("Starting location services...");
        await initializeLocationServices();
      } catch (error) {
        console.error("Failed to initialize location services:", error);
        document.getElementById('area-rating').textContent = "Location services unavailable. Please enable location permissions.";
      }
    }

    // Initialize Places Autocomplete
    function initializeAutocomplete() {
      const destinationInput = document.getElementById('destinationInput');
      const autocomplete = new google.maps.places.Autocomplete(destinationInput, {
        types: ['geocode', 'establishment'],
        componentRestrictions: { country: 'IN' },
        fields: ['place_id', 'geometry', 'name', 'formatted_address']
      });

      // Store place data when selected
      autocomplete.addListener('place_changed', () => {
        const place = autocomplete.getPlace();
        if (!place.geometry || !place.geometry.location) {
          alert('Please select a place from the dropdown.');
          return;
        }

        window.selectedDestination = {
          lat: place.geometry.location.lat(),
          lng: place.geometry.location.lng(),
          address: place.formatted_address
        };
        console.log("Destination selected:", window.selectedDestination);
      });
    }

    // Initialize location services with proper error handling
    async function initializeLocationServices() {
      try {
        // First attempt to get location from server
        console.log("Fetching saved locations from server...");
        const initialLocation = await loadCurrentLocation();
        if (initialLocation) {
          // Start recurring location updates
          startLocationTracking();
          // Trigger initial safety evaluation after a short delay
          setTimeout(evaluateLocation, 2000);
          safetyEvaluationTimer = setInterval(evaluateLocation, 250000);
          return;
        }
      } catch (error) {
        console.error("Error loading location from server:", error);
      }

      // Fallback to browser geolocation
      console.log("Trying browser geolocation as fallback...");
      return new Promise((resolve, reject) => {
        if (!navigator.geolocation) {
          reject(new Error("Geolocation is not supported by this browser"));
          return;
        }

        navigator.geolocation.getCurrentPosition(
          async (position) => {
            try {
              const { latitude, longitude } = position.coords;
              await saveLocationToServer(latitude, longitude);
              updateMapPosition({ lat: latitude, lng: longitude });
              startLocationTracking();
              setTimeout(evaluateLocation, 2000);
              resolve(true);
            } catch (error) {
              reject(error);
            }
          },
          (error) => reject(error),
          { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 }
        );
      });
    }

    // Start recurring location updates
    function startLocationTracking() {
      if (locationUpdateTimer) clearInterval(locationUpdateTimer);
      locationUpdateTimer = setInterval(updateCurrentLocation, 60000);

      if (navigator.geolocation) {
        navigator.geolocation.watchPosition(
          async (position) => {
            const { latitude, longitude } = position.coords;
            if (shouldUpdateLocation(latitude, longitude)) {
              await saveLocationToServer(latitude, longitude);
              updateMapPosition({ lat: latitude, lng: longitude });
            }
          },
          (error) => console.error("Geolocation watch error:", error),
          { enableHighAccuracy: true, maximumAge: 30000 }
        );
      }
    }

    // Check if location changed significantly
    function shouldUpdateLocation(lat, lng) {
      if (!currentPosition) return true;
      const latDiff = Math.abs(lat - currentPosition.lat);
      const lngDiff = Math.abs(lng - currentPosition.lng);
      return (latDiff > 0.0003 || lngDiff > 0.0003); // ~30 meters
    }

    // Save location to server
    async function saveLocationToServer(latitude, longitude) {
      try {
        const response = await fetch('/location', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'include',
          body: JSON.stringify({ latitude, longitude })
        });

        if (!response.ok) throw new Error(`Server returned ${response.status}`);
        console.log("Location saved to server");
        return true;
      } catch (error) {
        console.error("Failed to save location:", error);
        throw error;
      }
    }

    // Load current location from server
    async function loadCurrentLocation() {
      try {
        const response = await fetch('/locations-data', { credentials: 'include' });
        if (!response.ok) throw new Error(`Server returned ${response.status}`);

        const locations = await response.json();
        if (!locations || locations.length === 0) return false;

        const { latitude, longitude } = locations[0];
        currentPosition = { lat: latitude, lng: longitude };
        updateMapPosition(currentPosition);
        return true;
      } catch (error) {
        console.error("Failed to load location from server:", error);
        throw error;
      }
    }

    // Update current location periodically
    async function updateCurrentLocation() {
      if (!navigator.geolocation) return false;

      return new Promise((resolve, reject) => {
        navigator.geolocation.getCurrentPosition(
          async (position) => {
            try {
              const { latitude, longitude } = position.coords;
              if (shouldUpdateLocation(latitude, longitude)) {
                await saveLocationToServer(latitude, longitude);
                updateMapPosition({ lat: latitude, lng: longitude });
                currentPosition = { lat: latitude, lng: longitude };
              }
              resolve(true);
            } catch (error) {
              reject(error);
            }
          },
          (error) => reject(error),
          { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 }
        );
      });
    }

    // Update map position and marker
    function updateMapPosition(pos) {
      if (!map) return;

      map.setCenter(pos);

      if (marker) {
        marker.setPosition(pos);
      } else {
        marker = new google.maps.Marker({
          position: pos,
          map: map,
          title: 'Current Location',
          animation: google.maps.Animation.DROP,
          icon: {
            path: google.maps.SymbolPath.CIRCLE,
            fillColor: '#ff4081',
            fillOpacity: 0.8,
            strokeColor: '#fff',
            strokeWeight: 2,
            scale: 10
          }
        });
      }
    }

    // Evaluate location safety using AI
    async function evaluateLocation() {
      try {
        const ratingEl = document.getElementById('area-rating');
        ratingEl.innerHTML = `
          <div class="d-flex align-items-center justify-content-center">
            <div class="spinner-border text-primary me-2" role="status" style="width: 1.5rem; height: 1.5rem;">
              <span class="visually-hidden">Loading...</span>
            </div>
            <span>Analyzing area safety...</span>
          </div>
        `;

        const locRes = await fetch('/locations-data', { credentials: 'include' });
        const locs = await locRes.json();

        if (!locs || locs.length === 0) {
          ratingEl.textContent = "Location data unavailable";
          return;
        }

        const { latitude, longitude } = locs[0];
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 30000);

        const evalRes = await fetch('/evaluate-location', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'include',
          body: JSON.stringify({ latitude, longitude }),
          signal: controller.signal
        });

        clearTimeout(timeoutId);
        if (!evalRes.ok) throw new Error(`Server returned ${evalRes.status}`);

        const evalData = await evalRes.json();
        let rating = typeof evalData.rating !== 'undefined' ? Number(evalData.rating) : 3;
        let judgement = typeof evalData.judgement !== 'undefined' ? evalData.judgement : "Okay Area";

        updateSafetyDisplay(rating, judgement);
      } catch (error) {
        console.error('Safety evaluation error:', error);
        document.getElementById('area-rating').textContent = "Unable to evaluate area safety";
      }
    }

    // Update safety rating display
    function updateSafetyDisplay(rating, judgement) {
      const ratingEl = document.getElementById('area-rating');
      ratingEl.textContent = `Area Safety Rating: ${rating}/5 - ${judgement}`;
      ratingEl.style.backgroundColor = '';

      const panicBtn = document.querySelector('.panic-btn');

      if (rating >= 4) {
        ratingEl.style.borderLeftColor = '#28a745';
        ratingEl.style.background = 'linear-gradient(135deg, rgba(40, 167, 69, 0.05) 0%, rgba(40, 167, 69, 0.02) 100%)';
      } else if (rating === 3) {
        ratingEl.style.borderLeftColor = '#ffc107';
        ratingEl.style.background = 'linear-gradient(135deg, rgba(255, 193, 7, 0.05) 0%, rgba(255, 193, 7, 0.02) 100%)';
      } else if (rating === 2) {
        ratingEl.style.borderLeftColor = '#fd7e14';
        ratingEl.style.background = 'linear-gradient(135deg, rgba(253, 126, 20, 0.08) 0%, rgba(253, 126, 20, 0.05) 100%)';
        alert("Warning: The area is rated 2/5 - Unsafe Area. Please be cautious.");
        setTimeout(() => alert("Multiple Warning: Significant risk indicators detected in this area."), 1000);
      } else if (rating <= 1) {
        ratingEl.style.borderLeftColor = '#dc3545';
        ratingEl.style.background = 'linear-gradient(135deg, rgba(220, 53, 69, 0.1) 0%, rgba(220, 53, 69, 0.05) 100%)';
        panicBtn.style.backgroundColor = '#dc3545';
        panicBtn.classList.add('pulsing');
        alert("Critical Warning: The area is rated 1/5 - Unsafe Area. This location is extremely dangerous!");
        setTimeout(() => alert("Immediate Action Required: Use the panic button right away!"), 1000);
      }
    }

    // Send emergency panic alert
    async function sendPanic(button) {
      const now = Date.now();
      if (now - lastPanic < 35000) {
        return alert('Only one panic alert every 35 seconds allowed.');
      }
      lastPanic = now;

      if (button) {
        button.disabled = true;
        button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Sending Alert...';
      }

      try {
        let latitude, longitude;

        if (currentPosition) {
          latitude = currentPosition.lat;
          longitude = currentPosition.lng;
        } else if (marker && marker.getPosition()) {
          const pos = marker.getPosition();
          latitude = pos.lat();
          longitude = pos.lng();
        } else if (navigator.geolocation) {
          const position = await new Promise((resolve, reject) => {
            navigator.geolocation.getCurrentPosition(resolve, reject, {
              enableHighAccuracy: true,
              timeout: 10000,
              maximumAge: 0
            });
          });
          latitude = position.coords.latitude;
          longitude = position.coords.longitude;
        } else {
          throw new Error('Geolocation not supported and no stored location available');
        }

        const locationURL = `https://www.google.com/maps?q=${latitude},${longitude}`;
        const message = `Help me! My location is: ${locationURL}`;

        const panicRes = await fetch('/panic', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'include',
          body: JSON.stringify({ latitude, longitude })
        });

        if (!panicRes.ok) throw new Error(`Server returned ${panicRes.status}`);
        const panicData = await panicRes.json();
        alert(panicData.message || 'Panic alert sent!');

        evaluateLocation();

        const emergencyContact = '<%= user.emergencyContact %>';
        const whatsappURL = `https://wa.me/91${emergencyContact}?text=${encodeURIComponent(message)}`;
        window.open(whatsappURL, '_blank');

        if (navigator.sms) {
          navigator.sms.send(emergencyContact, message);
        } else {
          window.location.href = `sms:${emergencyContact}?body=${encodeURIComponent(message)}`;
        }

        if (button) {
          button.disabled = false;
          button.classList.add('btn-success');
          button.innerHTML = '<i class="fas fa-check-circle"></i> Alert Sent';
          setTimeout(() => {
            button.classList.remove('btn-success');
            button.innerHTML = '<i class="fas fa-exclamation-triangle"></i> Emergency Alert';
          }, 3000);
        }
      } catch (error) {
        console.error('Panic alert error:', error);
        alert('Failed to send panic alert: ' + error.message);
        if (button) {
          button.disabled = false;
          button.innerHTML = '<i class="fas fa-exclamation-triangle"></i> Emergency Alert';
        }
      }
    }

    // Plan safe route function - FIXED
    async function planSafeRoute() {
      try {
        if (!window.selectedDestination) {
          alert('Please select a destination from the dropdown suggestions');
          return;
        }

        if (!map || !marker) {
          alert('Map is not fully initialized. Please refresh the page.');
          return;
        }

        // Show loading indicator
        document.getElementById('routeAnalysis').style.display = 'block';
        document.getElementById('safetyMetrics').innerHTML = `
          <div class="loading-container">
            <div class="loading-spinner"></div>
            <p>Analyzing routes for safety...</p>
          </div>
        `;
        document.getElementById('alternativeRoutes').innerHTML = '';

        const currentLocation = marker.getPosition();
        if (!currentLocation) throw new Error("Current location marker not available");

        const destination = new google.maps.LatLng(
          window.selectedDestination.lat,
          window.selectedDestination.lng
        );

        if (!directionsRenderer) {
          directionsRenderer = new google.maps.DirectionsRenderer({
            map: map,
            suppressMarkers: false
          });
        }

        // Request directions
        const directionsService = new google.maps.DirectionsService();
        const result = await new Promise((resolve, reject) => {
          const timeoutId = setTimeout(() => reject(new Error("Route request timed out")), 20000);

          directionsService.route({
            origin: currentLocation,
            destination: destination,
            travelMode: google.maps.TravelMode.DRIVING,
            provideRouteAlternatives: true
          }, (response, status) => {
            clearTimeout(timeoutId);

            if (status === 'OK') {
              resolve(response);
            } else {
              reject(new Error(`Route calculation failed: ${status}`));
            }
          });
        });

        // Store routes and display
        routesData = result.routes;
        directionsRenderer.setRouteIndex(0);
        directionsRenderer.setDirections(result);
        selectedRouteIndex = 0;

        // Analyze safety for all routes
        const safetyAnalysis = await analyzeSafetyForRoutes(result.routes);

        // Display analysis results - FIX THE MISSING FUNCTION
        displayRouteAnalysis(safetyAnalysis);

      } catch (error) {
        console.error('Route planning error:', error);
        document.getElementById('safetyMetrics').innerHTML = `
          <div class="alert alert-danger">
            <i class="fas fa-exclamation-circle"></i> 
            Failed to plan route: ${error.message || 'Unknown error'}
            <br><br>
            <button onclick="planSafeRoute()" class="btn btn-outline-danger">Try Again</button>
          </div>
        `;
      }
    }

    // Analyze safety for routes
    async function analyzeSafetyForRoutes(routes) {
      try {
        const hour = new Date().getHours();

        if (!routes || !Array.isArray(routes) || routes.length === 0) {
          throw new Error("No valid routes available for analysis");
        }

        const routesForAnalysis = routes.map((route, index) => {
          if (!route || !route.legs || !route.legs[0]) {
            throw new Error(`Invalid route data for route ${index + 1}`);
          }

          const leg = route.legs[0];
          return {
            start: leg.start_location.toJSON(),
            end: leg.end_location.toJSON(),
            distance: leg.distance.text,
            duration: leg.duration.text,
            isDaytime: hour >= 6 && hour <= 18
          };
        });

        const response = await fetch('/analyze-route-safety', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ routes: routesForAnalysis, time: hour })
        });

        if (!response.ok) {
          const errorText = await response.text();
          throw new Error(`Server response error (${response.status}): ${errorText}`);
        }

        const safetyData = await response.json();

        if (!safetyData || !safetyData.safetyAnalyses || !Array.isArray(safetyData.safetyAnalyses)) {
          throw new Error("Invalid safety analysis data received");
        }

        window.safetyAnalysisData = safetyData;

        // Sort routes by safety score
        const sortedIndices = safetyData.safetyAnalyses.map((analysis, index) => ({
          index,
          safety: parseFloat(analysis.overallSafety) || 5
        })).sort((a, b) => b.safety - a.safety);

        return {
          safetyAnalyses: safetyData.safetyAnalyses,
          routes: routes.map((route, index) => {
            const safetyRank = sortedIndices.findIndex(item => item.index === index) + 1;
            return {
              index: index,
              name: safetyRank === 1 ? 'Safest Route' :
                safetyRank === 2 ? 'Second Safest Route' : `Route Option ${safetyRank}`,
              rank: safetyRank,
              distance: route.legs[0].distance.text,
              duration: route.legs[0].duration.text,
              safety: `Rank ${safetyRank}`,
              safetyScore: safetyData.safetyAnalyses[index].overallSafety
            };
          })
        };
      } catch (error) {
        console.error('Safety analysis error:', error);
        throw error;
      }
    }

    // Modified update safety metrics function to place safety tips after route options
    function updateSafetyMetricsDisplay(index) {
      if (!window.safetyAnalysisData ||
        !window.safetyAnalysisData.safetyAnalyses ||
        index >= window.safetyAnalysisData.safetyAnalyses.length) {
        console.error('Safety analysis data not available');
        return;
      }

      const routeAnalysis = window.safetyAnalysisData.safetyAnalyses[index];
      const metricsDiv = document.getElementById('safetyMetrics');

      metricsDiv.innerHTML = `
        <div class="route-safety-metrics">
          <div class="safety-metric safety-metric-1">
            <i class="fas fa-shield-alt"></i>
            <div>Overall Safety</div>
            <strong>${routeAnalysis.overallSafety}/10</strong>
          </div>
          <div class="safety-metric safety-metric-2">
            <i class="fas fa-lightbulb"></i>
            <div>Lighting</div>
            <strong>${routeAnalysis.lighting}/10</strong>
          </div>
          <div class="safety-metric safety-metric-3">
            <i class="fas fa-users"></i>
            <div>Crowd</div>
            <strong>${routeAnalysis.crowding}/10</strong>
          </div>
          <div class="safety-metric safety-metric-4">
            <i class="fas fa-building-shield"></i>
            <div>Police</div>
            <strong>${routeAnalysis.policeProximity}/10</strong>
          </div>
        </div>
      `;
    }

    // Modified display route analysis to separate safety tips from metrics
    function displayRouteAnalysis(data) {
      const routesDiv = document.getElementById('alternativeRoutes');
      const safetyTipsDiv = document.getElementById('safetyTips');

      // Sort routes by safety rank
      const sortedRoutes = [...data.routes].sort((a, b) => a.rank - b.rank);

      // Display metrics for the selected route
      updateSafetyMetricsDisplay(selectedRouteIndex);

      // Display all route options
      routesDiv.innerHTML = sortedRoutes.map(route => `
        <div class="route-option ${route.index === selectedRouteIndex ? 'selected' : ''}" onclick="selectRoute(${route.index})">
          <div class="route-header">
            <h5><i class="fas fa-car"></i> ${route.name}</h5>
            <span class="safety-rank">Safety: ${route.safetyScore}/10</span>
          </div>
          <div class="route-details">
            <span><i class="fas fa-clock"></i> Drive time: ${route.duration}</span>
            <span><i class="fas fa-road"></i> ${route.distance}</span>
          </div>
        </div>
      `).join('');

      // Display safety tips separately
      const routeAnalysis = window.safetyAnalysisData.safetyAnalyses[selectedRouteIndex];
      if (routeAnalysis.recommendations && routeAnalysis.recommendations.length > 0) {
        safetyTipsDiv.innerHTML = `
          <div class="safety-tips">
            <h5><i class="fas fa-info-circle"></i> Safety Tips</h5>
            <ul>
              ${routeAnalysis.recommendations.map(tip => `<li>${tip}</li>`).join('')}
            </ul>
          </div>
        `;
        safetyTipsDiv.style.display = 'block';
      } else {
        safetyTipsDiv.style.display = 'none';
      }
    }

    function selectRoute(index) {
      if (!routesData || index >= routesData.length) {
        console.error('Invalid route index or routes not loaded');
        return;
      }

      directionsRenderer.setRouteIndex(index);
      selectedRouteIndex = index;

      const routeOptions = document.querySelectorAll('.route-option');
      routeOptions.forEach((option, i) => {
        option.classList.toggle('selected', i === index);
      });

      updateSafetyMetricsDisplay(index);

      // Update safety tips for the selected route
      const safetyTipsDiv = document.getElementById('safetyTips');
      const routeAnalysis = window.safetyAnalysisData.safetyAnalyses[index];

      if (routeAnalysis.recommendations && routeAnalysis.recommendations.length > 0) {
        safetyTipsDiv.innerHTML = `
          <div class="safety-tips">
            <h5><i class="fas fa-info-circle"></i> Safety Tips</h5>
            <ul>
              ${routeAnalysis.recommendations.map(tip => `<li>${tip}</li>`).join('')}
            </ul>
          </div>
        `;
        safetyTipsDiv.style.display = 'block';
      } else {
        safetyTipsDiv.style.display = 'none';
      }
    }

    // Add back-to-top functionality
    function setupBackToTop() {
      const backToTopButton = document.createElement('div');
      backToTopButton.classList.add('back-to-top');
      backToTopButton.innerHTML = '<i class="fas fa-arrow-up"></i>';
      document.body.appendChild(backToTopButton);

      backToTopButton.addEventListener('click', () => {
        window.scrollTo({
          top: 0,
          behavior: 'smooth'
        });
      });

      window.addEventListener('scroll', () => {
        if (window.scrollY > 300) {
          backToTopButton.classList.add('visible');
        } else {
          backToTopButton.classList.remove('visible');
        }
      });
    }

    // Improved voice recognition functions with explicit permission request
    function startVoicePanicDetection() {
      if (!('webkitSpeechRecognition' in window || 'SpeechRecognition' in window)) {
        alert("Your browser doesn't support voice recognition.");
        return false;
      }

      try {
        // First explicitly request microphone permission
        navigator.mediaDevices.getUserMedia({ audio: true })
          .then(stream => {
            // Stop the stream immediately, we just needed the permission
            stream.getTracks().forEach(track => track.stop());

            // Now initialize speech recognition
            recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
            recognition.lang = 'en-US';
            recognition.continuous = true;
            recognition.interimResults = false;

            recognition.onresult = function (event) {
              const transcript = event.results[event.results.length - 1][0].transcript.trim().toLowerCase();
              console.log("Detected speech:", transcript);

              if (transcript.includes(triggerWord)) {
                console.log("Voice trigger word detected!");
                const panicButton = document.querySelector('.panic-btn');
                panicButton.classList.add('pulsing');
                alert("Voice trigger word detected: 'HELP'! Sending emergency alert...");
                sendPanic(panicButton);
              }
            };

            recognition.onerror = function (event) {
              console.error("Speech recognition error:", event.error);
              if (event.error === 'not-allowed') {
                alert("Microphone access denied. Voice detection cannot function without microphone permissions.");
                document.getElementById('voiceToggle').checked = false;
                toggleVoiceControl(); // Update UI state
              }
            };

            recognition.onend = function () {
              if (document.getElementById('voiceToggle')?.checked) {
                console.log("Recognition ended, restarting...");
                try {
                  recognition.start();
                } catch (e) {
                  console.error("Failed to restart recognition:", e);
                }
              }
            };

            recognition.start();
            console.log("Voice detection started successfully");
            return true;
          })
          .catch(err => {
            console.error("Microphone permission denied:", err);
            alert("Microphone permission denied. Please allow microphone access for voice detection to work.");
            document.getElementById('voiceToggle').checked = false;
            toggleVoiceControl(); // Update UI state
            return false;
          });

        return true; // Optimistic return
      } catch (error) {
        console.error("Failed to start voice recognition:", error);
        alert("Failed to start voice detection. Please try again or use a different browser.");
        return false;
      }
    }

    // Modified toggle function to handle UI state properly
    function toggleVoiceControl() {
      const enabled = document.getElementById("voiceToggle").checked;
      const toggleLabel = document.querySelector('.toggle-label');

      if (enabled) {
        toggleLabel.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Voice Detection: <span class="text-warning">Activating...</span>';
        const success = startVoicePanicDetection();

        // Update UI after small delay to allow permission dialog to show
        setTimeout(() => {
          if (document.getElementById("voiceToggle").checked) {
            toggleLabel.innerHTML = '<i class="fas fa-microphone"></i> Voice Detection: <span class="text-success">Active</span>';
          } else {
            toggleLabel.innerHTML = '<i class="fas fa-microphone-slash"></i> Voice Detection: <span class="text-danger">Failed</span>';
          }
        }, 1000);
      } else {
        stopVoicePanicDetection();
        toggleLabel.innerHTML = '<i class="fas fa-microphone-slash"></i> Voice Detection: <span class="text-secondary">Inactive</span>';
      }
    }

    // Improved shake detection setup with better initialization
    function setupShakeDetection() {
      // Check if ShakeEvent is supported
      if (typeof Shake === 'function') {
        try {
          console.log("Initializing shake detection...");

          // Initialize with higher sensitivity for better detection
          const myShakeEvent = new Shake({
            threshold: 12,  // Lower threshold for better detection
            timeout: 1000   // Minimum interval between shakes
          });

          myShakeEvent.start();
          console.log("Shake detection started");

          // Add shake event listener
          window.addEventListener('shake', function () {
            console.log("Shake detected!");
            const panicButton = document.querySelector('.panic-btn');
            sendPanic(panicButton);
          }, false);

          // Set a global flag that shake is active
          window.shakeDetectionActive = true;

          // Display a toast notification that shake is active
          showToastNotification("Shake detection active", "Shake your device in emergency to trigger alert", 5000);
        } catch (e) {
          console.error("Error initializing shake detection:", e);
          window.shakeDetectionActive = false;
        }
      } else {
        console.log("Shake.js not available");
        window.shakeDetectionActive = false;
      }
    }

    // Toast notification helper
    function showToastNotification(title, message, duration = 3000) {
      const toast = document.createElement('div');
      toast.style.cssText = `
        position: fixed;
        bottom: 30px;
        left: 50%;
        transform: translateX(-50%);
        background-color: #333;
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        z-index: 9999;
        min-width: 250px;
        max-width: 90%;
        text-align: center;
        font-size: 14px;
        opacity: 0;
        transition: opacity 0.3s ease;
      `;

      toast.innerHTML = `
        <strong>${title}</strong><br>
        <span>${message}</span>
      `;

      document.body.appendChild(toast);

      // Fade in
      setTimeout(() => { toast.style.opacity = '1'; }, 10);

      // Fade out and remove
      setTimeout(() => {
        toast.style.opacity = '0';
        setTimeout(() => {
          document.body.removeChild(toast);
        }, 300);
      }, duration);
    }

    // Initialize UI components - IMPROVED with fixed reminder dialog
    function initUI() {
      // Initialize voice toggle
      const voiceToggle = document.getElementById("voiceToggle");
      if (voiceToggle) {
        voiceToggle.checked = false;
        toggleVoiceControl();

        // Show reminder dialog after 10 seconds if voice detection is not enabled
        setTimeout(() => {
          if (!voiceToggle.checked) {
            const enableVoice = confirm("For enhanced safety, would you like to enable voice detection? This will allow the app to detect if you say 'help' and automatically send alerts.");
            if (enableVoice) {
              voiceToggle.checked = true;
              toggleVoiceControl();
            }
          }
        }, 10000);
      }

      // Initialize animations
      const animatedElements = document.querySelectorAll('.animate');
      function checkIfInView() {
        // ...existing code...
      }

      window.addEventListener('load', checkIfInView);
      window.addEventListener('scroll', checkIfInView);
    }

    // Initialize everything when DOM is ready
    document.addEventListener("DOMContentLoaded", () => {
      initUI();
      setupBackToTop();

      // Remove these lines since safety-monitor.js will handle safety evaluation
      // setTimeout(evaluateLocation, 2000);
      // safetyEvaluationTimer = setInterval(evaluateLocation, 250000);

      // Enhanced shakejs initialization
      // Wait a moment to ensure device is ready
      setTimeout(setupShakeDetection, 2000);
    });
  </script>

  <!-- Google Maps script -->
  <script
    src="https://maps.googleapis.com/maps/api/js?key=<%= process.env.GOOGLE_MAPS_KEY %>&libraries=places&callback=initMap"
    async defer></script>

  <!-- Shake detection script -->
  <script src="/js/shake.js"></script>
  <script>
    // Double-check that shake.js loaded
    window.addEventListener('load', function () {
      if (typeof Shake !== 'function') {
        console.error("Shake.js failed to load!");

        // Try loading it again
        const shakeScript = document.createElement('script');
        shakeScript.src = '/js/shake.js';
        shakeScript.onload = function () {
          console.log("Shake.js loaded successfully on second attempt");
          setupShakeDetection();
        };
        shakeScript.onerror = function () {
          console.error("Failed to load Shake.js on second attempt");
        };
        document.body.appendChild(shakeScript);
      } else {
        console.log("Shake.js loaded successfully");
      }
    });
  </script>

  <!-- Safety Monitoring Script -->
  <script>
    // Pass server config to client
    window.safetyRefreshInterval = <%= typeof safetyRefreshInterval !== 'undefined' ? safetyRefreshInterval : 300000 %>;
    window.safetyRetryInterval = <%= typeof safetyRetryInterval !== 'undefined' ? safetyRetryInterval : 30000 %>;

    // Remove any popup safety indicators
    document.addEventListener('DOMContentLoaded', function () {
      const safetyIndicator = document.getElementById('safety-indicator');
      if (safetyIndicator && safetyIndicator.parentNode) {
        safetyIndicator.parentNode.removeChild(safetyIndicator);
      }
    });
  </script>
  <script src="/js/safety-monitor.js"></script>

  <!-- Remove redundant safety indicator - using just the one in the main content -->
  <script>
    // Fix potential issue with duplicate safety indicators
    document.addEventListener('DOMContentLoaded', () => {
      const indicators = document.querySelectorAll('#safety-indicator');
      if (indicators.length > 1) {
        // Keep only the first one
        for (let i = 1; i < indicators.length; i++) {
          indicators[i].remove();
        }
      }
    });
  </script>

</body>

</html>