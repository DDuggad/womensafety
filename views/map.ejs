<!DOCTYPE html>
<html>
<head>
  <title>My Live Location</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- Google Fonts for a modern look -->
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap" rel="stylesheet">
  <style>
    /* Base Variables */
    :root {
      --primary-color: #007bff;
      --danger-color: #e74c3c;
      --light-bg: #f9f9f9;
      --dark-bg: #ffffff;
      --font: 'Roboto', sans-serif;
      --box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    /* Global Reset */
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    body {
      background: var(--light-bg);
      font-family: var(--font);
      color: #333;
      padding: 20px;
    }
    /* Header with Profile & Logout */
    header {
      width: 100%;
      background: var(--dark-bg);
      box-shadow: var(--box-shadow);
      padding: 10px 20px;
      margin-bottom: 20px;
    }
    .header-container {
      max-width: 1000px;
      margin: 0 auto;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    .header-container .logo h2 {
      font-size: 1.75rem;
      color: var(--primary-color);
      margin: 0;
    }
    .header-buttons {
      display: flex;
      align-items: center;
      gap: 15px;
    }
    .header-btn {
      text-decoration: none;
      padding: 8px 16px;
      border-radius: 50px;
      font-weight: 500;
      transition: background 0.3s;
      color: #fff;
    }
    .header-btn.profile {
      background: var(--primary-color);
    }
    .header-btn.logout {
      background: var(--danger-color);
    }
    .header-btn:hover {
      opacity: 0.9;
    }
    /* Main Container */
    .container {
      max-width: 800px;
      margin: 0 auto;
      background: var(--dark-bg);
      border-radius: 8px;
      box-shadow: var(--box-shadow);
      padding: 20px;
    }
    /* Toggle Container (Voice Detection) */
    .toggle-container {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 10px;
      margin: 20px 0;
    }
    .switch {
      position: relative;
      display: inline-block;
      width: 50px;
      height: 24px;
    }
    .switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }
    .slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #ccc;
      transition: 0.4s;
      border-radius: 24px;
    }
    .slider:before {
      position: absolute;
      content: "";
      height: 18px;
      width: 18px;
      left: 3px;
      bottom: 3px;
      background-color: white;
      transition: 0.4s;
      border-radius: 50%;
    }
    input:checked + .slider {
      background-color: #4CAF50;
    }
    input:checked + .slider:before {
      transform: translateX(26px);
    }
    /* Panic Button: Bigger by default */
    .panic-btn {
      display: block;
      margin: 10px auto;
      padding: 16px 32px;
      font-size: 24px;
      background: var(--danger-color);
      color: #fff;
      border: none;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: var(--box-shadow);
    }
    /* Evaluation Display */
    #area-rating {
      text-align: center;
      margin: 10px auto;
      padding: 5px 10px;
      font-size: 18px;
      font-weight: bold;
      background: #f1f1f1;
      border-radius: 4px;
      transition: background-color 0.3s ease;
    }
    /* Responsive Square Map */
    #map {
      width: 100%;
      aspect-ratio: 1 / 1;
      margin: 20px auto;
      border: 1px solid #ccc;
      border-radius: 6px;
    }
    /* Responsive Adjustments */
    @media (max-width: 600px) {
      .header-container {
        flex-direction: column;
        gap: 10px;
      }
      #area-rating {
        font-size: 16px;
      }
      .panic-btn {
        font-size: 20px;
        padding: 12px 24px;
      }
    }
  </style>
</head>
<body>
  <!-- Header Section with Profile & Logout Buttons -->
  <header>
    <div class="header-container">
      <div class="logo">
        <h2>My Safety App</h2>
      </div>
      <div class="header-buttons">
        <a href="/profile" class="header-btn profile">My Profile</a>
        <a href="/logout" class="header-btn logout">Logout</a>
      </div>
    </div>
  </header>

  <!-- Main Content Container -->
  <div class="container">
    <div class="toggle-container">
      <label>Voice Panic Alert</label>
      <!-- Voice detection is off by default -->
      <label class="switch">
        <input type="checkbox" id="voiceToggle" onchange="toggleVoiceControl()">
        <span class="slider"></span>
      </label>
    </div>

    <button onclick="sendPanic(this)" class="panic-btn">ðŸš¨ Send Panic Alert</button>
    <div id="area-rating">Evaluating area...</div>
    <div id="map"></div>
  </div>

  <!-- JavaScript Section -->
  <script>
    let map, marker, lastPanic = 0;
    const triggerWord = "help";
    let recognition = null;

    function initMap() {
      map = new google.maps.Map(document.getElementById('map'), {
        center: { lat: 0, lng: 0 },
        zoom: 15
      });
      loadCurrentLocation();
      // Refresh location every 250 seconds
      setInterval(loadCurrentLocation, 250 * 1000);
      // Evaluate area safety on load and every 260 seconds
      evaluateLocation();
      setInterval(evaluateLocation, 260 * 1000);
    }

    async function loadCurrentLocation() {
      try {
        const res = await fetch('/locations-data', { credentials: 'include' });
        const locs = await res.json();
        if (!locs.length) {
          // Fallback: use device's geolocation if no backend data exists
          if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(pos => {
              const { latitude, longitude } = pos.coords;
              const fallbackPos = { lat: latitude, lng: longitude };
              map.setCenter(fallbackPos);
              if (marker) {
                marker.setPosition(fallbackPos);
              } else {
                marker = new google.maps.Marker({
                  position: fallbackPos,
                  map: map,
                  title: 'Current Location (fallback)'
                });
              }
            }, error => {
              console.error('Fallback geolocation error:', error);
            });
          }
          return;
        }
        const { latitude, longitude } = locs[0];
        const pos = { lat: latitude, lng: longitude };
        map.setCenter(pos);
        if (marker) {
          marker.setPosition(pos);
        } else {
          marker = new google.maps.Marker({
            position: pos,
            map: map,
            title: 'Current Location'
          });
        }
      } catch (e) {
        console.error('Error loading location:', e);
      }
    }

    async function evaluateLocation() {
      try {
        // Fetch the latest location
        const locRes = await fetch('/locations-data', { credentials: 'include' });
        const locs = await locRes.json();
        if (!locs.length) {
          console.log("No location data available for evaluation.");
          document.getElementById('area-rating').textContent = "Location unavailable";
          return;
        }
        const { latitude, longitude } = locs[0];
        // Call the backend evaluation endpoint (using Gemini integration)
        const evalRes = await fetch('/evaluate-location', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'include',
          body: JSON.stringify({ latitude, longitude })
        });
        const evalData = await evalRes.json();

        // Use fallback defaults if data is undefined
        let rating = typeof evalData.rating !== 'undefined' ? Number(evalData.rating) : 3;
        let judgement = typeof evalData.judgement !== 'undefined' ? evalData.judgement : "Okay Area";

        // Update the evaluation display
        const ratingEl = document.getElementById('area-rating');
        ratingEl.textContent = `Area Safety Rating: ${rating}/5 - ${judgement}`;

        // Reset default styles
        ratingEl.style.backgroundColor = '';
        const panicBtn = document.querySelector('.panic-btn');
        panicBtn.style.fontSize = '24px';
        panicBtn.style.padding = '16px 32px';
        panicBtn.style.borderRadius = '10px';
        panicBtn.style.transform = 'scale(1)';
        panicBtn.style.backgroundColor = 'var(--danger-color)';

        // Apply special warnings/styles for low safety ratings
        if (rating === 2) {
          ratingEl.style.backgroundColor = 'red';
          alert("Warning: The area is rated 2/5 - Unsafe Area. Please be cautious.");
          alert("Multiple Warning: Significant risk indicators detected in this area.");
        } else if (rating === 1) {
          panicBtn.style.backgroundColor = 'red';
          panicBtn.style.fontSize = '26px';
          panicBtn.style.padding = '18px 36px';
          panicBtn.style.borderRadius = '12px';
          panicBtn.style.transform = 'scale(1.2)';
          alert("Critical Warning: The area is rated 1/5 - Unsafe Area. This location is extremely dangerous!");
          alert("Immediate Action Required: Use the panic button right away!");
        } else if (rating <= 3) {
          alert(`Warning: The area is rated ${rating}/5 (${judgement}). Please stay alert.`);
        }
      } catch (err) {
        console.error('Evaluation error:', err);
      }
    }

    async function sendPanic(button) {
      const now = Date.now();
      if (now - lastPanic < 35000) {
        return alert('Only one panic alert every 35 seconds allowed.');
      }
      lastPanic = now;
      if (button) button.disabled = true;

      if (!navigator.geolocation) {
        alert('Geolocation not supported');
        if (button) button.disabled = false;
        return;
      }

      navigator.geolocation.getCurrentPosition(async pos => {
        const { latitude, longitude } = pos.coords;
        const locationURL = `https://www.google.com/maps?q=${latitude},${longitude}`;
        const message = `Help me! My location is: ${locationURL}`;

        try {
          const panicRes = await fetch('/panic', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify({ latitude, longitude })
          });
          const panicData = await panicRes.json();
          alert(panicData.message || 'Panic alert sent!');

          const emergencyContact = '<%= user.emergencyContact %>';
          const whatsappURL = `https://wa.me/91${emergencyContact}?text=${encodeURIComponent(message)}`;
          window.open(whatsappURL, '_blank');

          if (navigator.sms) {
            navigator.sms.send(emergencyContact, message);
          } else {
            window.location.href = `sms:${emergencyContact}?body=${encodeURIComponent(message)}`;
          }
          loadCurrentLocation();
        } catch (err) {
          console.error('Panic error:', err);
          alert('Failed to send panic alert.');
        } finally {
          if (button) button.disabled = false;
        }
      }, () => {
        alert('Please enable location services.');
        if (button) button.disabled = false;
      });
    }

    function startVoicePanicDetection() {
      if (!('webkitSpeechRecognition' in window || 'SpeechRecognition' in window)) {
        alert("Your browser doesn't support voice recognition.");
        return;
      }
      recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
      recognition.lang = 'en-US';
      recognition.continuous = true;
      recognition.interimResults = false;
      recognition.onresult = function(event) {
        const transcript = event.results[event.results.length - 1][0].transcript.trim().toLowerCase();
        console.log("Heard:", transcript);
        if (transcript.includes(triggerWord)) {
          alert("Voice trigger word detected!");
          sendPanic(null);
        }
      };
      recognition.onerror = function(event) {
        console.error("Speech recognition error:", event.error);
      };
      recognition.onend = function() {
        if (document.getElementById('voiceToggle')?.checked) {
          recognition.start(); // auto-restart if enabled
        }
      };
      recognition.start();
    }

    function stopVoicePanicDetection() {
      if (recognition) {
        recognition.stop();
        recognition = null;
      }
    }

    function toggleVoiceControl() {
      const enabled = document.getElementById("voiceToggle").checked;
      if (enabled) {
        startVoicePanicDetection();
      } else {
        stopVoicePanicDetection();
      }
    }

    document.addEventListener("DOMContentLoaded", () => {
      // Set voice detection off by default
      const voiceToggle = document.getElementById("voiceToggle");
      voiceToggle.checked = false;
      toggleVoiceControl();
      // After 7 seconds, if voice detection is still off, alert the user to enable it for enhanced safety.
      setTimeout(() => {
        if (!voiceToggle.checked) {
          alert("For enhanced safety, please consider enabling voice detection using the toggle above.");
        }
      }, 7000);
    });
  </script>
  
  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBrI9BCKW9G6l67-QUfVkLwywpLLA1hLcQ&callback=initMap" async defer></script>
</body>
</html>
