<!DOCTYPE html>
<html>
<head>
  <title>My Live Location</title>
  <style>
    body {
      text-align: center;
      font-family: Arial, sans-serif;
      margin: 20px;
    }
    #map {
      height: 300px;
      width: 80%;
      margin: 20px auto;
      border: 1px solid #ccc;
    }
    .panic-btn {
      margin: 10px auto;
      display: block;
      padding: 8px 16px;
      font-size: 16px;
      background: red;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
    }
    .back-link {
      display: inline-block;
      margin-bottom: 10px;
      color: #007bff;
      text-decoration: none;
    }
    .back-link:hover {
      text-decoration: underline;
    }

    /* Slider Styles */
    .toggle-container {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 10px;
      margin: 20px 0;
    }
    .switch {
      position: relative;
      display: inline-block;
      width: 50px;
      height: 24px;
    }

    .switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }

    .slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #ccc;
      transition: 0.4s;
      border-radius: 24px;
    }

    .slider:before {
      position: absolute;
      content: "";
      height: 18px;
      width: 18px;
      left: 3px;
      bottom: 3px;
      background-color: white;
      transition: 0.4s;
      border-radius: 50%;
    }

    input:checked + .slider {
      background-color: #4CAF50;
    }

    input:checked + .slider:before {
      transform: translateX(26px);
    }
  </style>
</head>
<body>
  <a href="/dashboard" class="back-link">‚Üê Back to Dashboard</a>
  <h1>Current Location</h1>

  <div class="toggle-container">
    <label>Voice Panic Alert</label>
    <label class="switch">
      <input type="checkbox" id="voiceToggle" onchange="toggleVoiceControl()" checked>
      <span class="slider"></span>
    </label>
  </div>

  <button onclick="sendPanic(this)" class="panic-btn">üö® Send Panic Alert</button>
  <div id="map"></div>

  <script>
    let map, marker, lastPanic = 0;
    const triggerWord = "help";
    let recognition = null;

    function initMap() {
      map = new google.maps.Map(document.getElementById('map'), {
        center: { lat: 0, lng: 0 },
        zoom: 15
      });
      loadCurrentLocation();
      setInterval(loadCurrentLocation, 250 * 1000);
    }

    async function loadCurrentLocation() {
      try {
        const res = await fetch('/locations-data', { credentials: 'include' });
        const locs = await res.json();
        if (!locs.length) return;

        const { latitude, longitude } = locs[0];
        const pos = { lat: latitude, lng: longitude };
        map.setCenter(pos);

        if (marker) {
          marker.setPosition(pos);
        } else {
          marker = new google.maps.Marker({
            position: pos,
            map: map,
            title: 'Current Location'
          });
        }
      } catch (e) {
        console.error('Error loading location:', e);
      }
    }

    async function sendPanic(button) {
      const now = Date.now();
      if (now - lastPanic < 35_000) {
        return alert('Only one panic alert every 35 seconds allowed.');
      }
      lastPanic = now;
      if (button) button.disabled = true;

      if (!navigator.geolocation) {
        alert('Geolocation not supported');
        if (button) button.disabled = false;
        return;
      }

      navigator.geolocation.getCurrentPosition(async pos => {
        const { latitude, longitude } = pos.coords;
        const locationURL = `https://www.google.com/maps?q=${latitude},${longitude}`;
        const message = `Help me! My location is: ${locationURL}`;

        try {
          const panicRes = await fetch('/panic', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify({ latitude, longitude })
          });
          const panicData = await panicRes.json();
          alert(panicData.message || 'Panic alert sent!');

          const emergencyContact = '<%= user.emergencyContact %>';
          const whatsappURL = `https://wa.me/91${emergencyContact}?text=${encodeURIComponent(message)}`;
          window.open(whatsappURL, '_blank');

          if (navigator.sms) {
            navigator.sms.send(emergencyContact, message);
          } else {
            window.location.href = `sms:${emergencyContact}?body=${encodeURIComponent(message)}`;
          }

          loadCurrentLocation();
        } catch (err) {
          console.error('Panic error:', err);
          alert('Failed to send panic alert.');
        } finally {
          if (button) button.disabled = false;
        }
      }, () => {
        alert('Please enable location services.');
        if (button) button.disabled = false;
      });
    }

    function startVoicePanicDetection() {
      if (!('webkitSpeechRecognition' in window || 'SpeechRecognition' in window)) {
        alert("Your browser doesn't support voice recognition.");
        return;
      }

      recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
      recognition.lang = 'en-US';
      recognition.continuous = true;
      recognition.interimResults = false;

      recognition.onresult = function(event) {
        const transcript = event.results[event.results.length - 1][0].transcript.trim().toLowerCase();
        console.log("Heard:", transcript);

        if (transcript.includes(triggerWord)) {
          alert("Voice trigger word detected!");
          sendPanic(null);
        }
      };

      recognition.onerror = function(event) {
        console.error("Speech recognition error:", event.error);
      };

      recognition.onend = function() {
        if (document.getElementById('voiceToggle')?.checked) {
          recognition.start(); // auto-restart
        }
      };

      recognition.start();
    }

    function stopVoicePanicDetection() {
      if (recognition) {
        recognition.stop();
        recognition = null;
      }
    }

    function toggleVoiceControl() {
      const enabled = document.getElementById("voiceToggle").checked;
      if (enabled) {
        startVoicePanicDetection();
      } else {
        stopVoicePanicDetection();
      }
    }

    document.addEventListener("DOMContentLoaded", () => {
      document.getElementById("voiceToggle").checked = true;
      toggleVoiceControl();
    });
  </script>

  <script
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBrI9BCKW9G6l67-QUfVkLwywpLLA1hLcQ&callback=initMap&v=weekly"
    async defer>
  </script>
</body>
</html>
